#!/bin/bash

. "${PWD}/dev/utility.sh"

stop() {
    print_command "stop pre commit hook"
    exit $1
}

lint() {
    STAGED_FILES=$1

    print_command "start php lint"
    println ""

    for FILE in ${STAGED_FILES}; do
        run_in_container php -l -d display_errors=0 "${FILE}"

        if [[ $? != 0 ]]; then
            print_error "fix the error before commit"
            stop 1
        fi
    done

    println ""
    print_command "end php lint"
}

code_sniffer() {
    print_command "start code sniffer"
    println ""

    run_in_container ./vendor/bin/phpcs --no-cache --encoding=utf-8 -n -p -v -s $1

    if [[ $? != 0 ]]; then
        print_error "fix the errors before commit"
        stop 1
    fi

    print_command "end code sniffer"
}

check_container() {
    run_in_container php -v >/dev/null 2>&1
    PHP_IS_INSTALLED=$?

    if [[ "${PHP_IS_INSTALLED}" -ne 0 ]]; then
        println ""

        print_error "the dev container is not running"

        println ""

        stop 1
    fi
}

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

STAGED_FILES=$(git diff --cached --name-only)

print_command "${PWD} start pre commit hook"

if [[ "${STAGED_FILES}" = "" ]]; then
    println "no files to commit"

    stop 1
fi

println ""

print_command "staged files start"
println "${STAGED_FILES}"
print_command "staged files end"

check_container

STAGED_FILES_PHP=$(git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\.php)
if [[ "${STAGED_FILES_PHP}" != "" ]]; then
    lint "${STAGED_FILES_PHP}"

    println ""

    code_sniffer "${STAGED_FILES}"
fi

println ""

print_command "staged files after hooks start"
println "$(git diff --cached --name-only)"
print_command "staged files after hooks end"

println ""

stop $?
